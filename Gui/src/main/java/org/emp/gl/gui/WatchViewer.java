/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.emp.gl.gui;

import org.emp.gl.core.lookup.Lookup;
import org.emp.gl.timer.service.TimerChangeListener;
import org.emp.gl.timer.service.TimerService;

import javax.swing.*;
import java.beans.PropertyChangeEvent;

/**
 *
 * @author sweeffon
 */
public class WatchViewer extends javax.swing.JFrame implements TimerChangeListener {

    /**
     * Creates new form WatchViewer
     */
    public WatchViewer() {
        initComponents();
        Lookup.getInstance().getService(TimerService.class).addTimeChangeListener(this);
        hh.setText(String.format("%2d", Lookup.getInstance().getService(TimerService.class).getHeures()));
        mm.setText(String.format("%2d", Lookup.getInstance().getService(TimerService.class).getMinutes()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        hh = new javax.swing.JLabel();
        sep = new javax.swing.JLabel();
        mm = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        hh.setFont(new java.awt.Font("Consolas", 1, 48)); // NOI18N
        hh.setText("00");
        getContentPane().add(hh, new java.awt.GridBagConstraints());

        sep.setFont(new java.awt.Font("Consolas", 1, 48)); // NOI18N
        sep.setText(":");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(14, 14, 14, 14);
        getContentPane().add(sep, gridBagConstraints);

        mm.setFont(new java.awt.Font("Consolas", 1, 48)); // NOI18N
        mm.setText("00");
        getContentPane().add(mm, new java.awt.GridBagConstraints());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel hh;
    private javax.swing.JLabel mm;
    private javax.swing.JLabel sep;
    private javax.swing.JLabel ss;
    private javax.swing.JLabel sep1;
    private Boolean isSec=false;
    public void setIsSec(Boolean b)
    {
        this.isSec=b;
    }

    public void setSs(JLabel ss) {
        this.ss = ss;
    }
    public Boolean getIsSec(){
        return isSec;
    }

    public void setSep1(JLabel sep1) {
        this.sep1 = sep1;
    }

    @Override
    public void propertyChange(PropertyChangeEvent propertyChangeEvent) {
        if (propertyChangeEvent.getPropertyName().equals(TimerChangeListener.HEURE_PROP))
            hh.setText(String.format("%2d", Lookup.getInstance().getService(TimerService.class).getHeures()));
        if (propertyChangeEvent.getPropertyName().equals(TimerChangeListener.MINUTE_PROP))
            mm.setText(String.format("%2d", Lookup.getInstance().getService(TimerService.class).getMinutes()));
        if (propertyChangeEvent.getPropertyName().equals(TimerChangeListener.SECONDE_PROP)) {
            if(isSec)
                ss.setText(String.format("%2d", Lookup.getInstance().getService(TimerService.class).getSecondes()));
                if (Lookup.getInstance().getService(TimerService.class).getSecondes()%2 == 0) {
                sep.setText(":");
                if(isSec)
                    sep1.setText(":");
            }
            else {
                sep.setText("-");
                if(isSec)
                    sep1.setText("-");
            }
        }

    }



    // End of variables declaration//GEN-END:variables
}
